<% if current_user %>
<% content_for :head do %>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
<script type="text/javascript" src="/javascripts/markerWithLabel.js"></script>
<script type="text/javascript" src="/javascripts/infobox.js"></script>
<script type="text/javascript">
var map;
var myLocation;
var playerIndex = -1;
var zIndexTop = 0;
var allPlayers = [<%- @players.each do |user| -%>
  [<%= user.latitude %>, <%= user.longitude %>, "<%= user.name %>", <%= user.facebook_id %>, "<%= user.deadtime %>", null, <%= user.hp %>, <%= user.curScore.round %>],
<%- end -%>];
var allBombs = [<%- @bombs.each do |bomb| -%>
  <%- if !bomb.isExploded? -%>[<%= bomb.latitude %>, <%= bomb.longitude %>, <%= bomb.timeLeft * 1000 %>, null, null, "<%= User.find(bomb.owner_id).name %>",<%= bomb.srcLat %>, <%=  bomb.srcLng %>],<%- end -%>
<%- end -%>];
var gCanvasElement;
var gDrawingContext;
var kPixelWidth = 1196;
var kPixelHeight= 736;
var bombPathOverlay;

function createBomb() {
  var marker = new MarkerWithLabel({
    position: myLocation,
    map: map,
    title: "Your bomb",
    icon: "/images/dragBomb.png",
    draggable: true,
    zIndex: 100000,
    labelContent: "",
    labelAnchor: myLocation
  });

  <%- if current_user.curScore and current_user.curScore < 100 -%>
    var helpInfobox = new InfoBox({
      content: "Drag your bomb to where you want to drop it, and then double-click to light the fuse!",
      boxStyle: { width: "250px" },
      closeBoxURL: ""
    });
    setTimeout(function(){helpInfobox.close()}, 8000);
    helpInfobox.open(map, marker);
  <%- end -%>
  google.maps.event.addListener(marker, "dragend", function() {
    var distance = haversineDistance(myLocation.lat(), myLocation.lng(), this.getPosition().lat(), this.getPosition().lng());
    var displayedBombTime = Math.round(<%= clientCalcDuration %>);
    this.setOptions({labelContent: displayedBombTime});
  });
  google.maps.event.addListener(marker, "dblclick", function() {
    this.setMap(null);
    var bombLat1 = this.getPosition().lat();
    var bombLng1 = this.getPosition().lng();
    var distance = haversineDistance(myLocation.lat(), myLocation.lng(), bombLat1, bombLng1);
    var bombTime = 1000 * <%= clientCalcDuration %>;
    allBombs.push([bombLat1, bombLng1, bombTime, null, null, "<%= current_user.name %>",myLocation.lat(),myLocation.lng()]);
    var targetUrl = "/game/dropBomb?lat=" + this.getPosition().lat() + "&lng=" + this.getPosition().lng();
    pushData = new Image();
    pushData.src = targetUrl;
  });
}

function gotPositionCallback(position) {
  myLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
  pushData = new Image();
  pushData.src = "/game/playerMoved?lat=" + position.coords.latitude + "&lng=" + position.coords.longitude;
  map.setCenter(myLocation);
  <%- if !current_user.deadtime and !current_user.bomb_id -%>
    createBomb();
  <%- end -%>

  allPlayers[playerIndex][0] = position.coords.latitude;
  allPlayers[playerIndex][1] = position.coords.longitude;
  drawPlayer(playerIndex);

  navigator.geolocation.watchPosition(function(position) {
    //console.log("position: " + position.coords.latitude + ',' + position.coords.longitude + '; myLocation: ' + myLocation.lat() + ', ' + myLocation.lng());
    if (myLocation.lat() == position.coords.latitude && myLocation.lng() == position.coords.longitude)
      return;
    pushData = new Image();
    pushData.src = "/game/playerMoved?lat=" + position.coords.latitude + "&lng=" + position.coords.longitude;
    myLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    allPlayers[playerIndex][5].setPosition(myLocation);
  });
}
function setMapLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(gotPositionCallback); // TODO(jeff): catch on error
  } else {
    alert("Your browser does not support geolocation. Please try a different browser.");
  }
}

function drawGame() {
  if(gDrawingContext != null)
  {
    gDrawingContext.clearRect(0, 0, kPixelWidth, kPixelHeight);
    for(var i=0;i<allPlayers.length;i++) {
      if (allPlayers[i][3] == <%= current_user.facebook_id %>) {
        playerIndex = i;
        continue;
      }
      drawPlayer(allPlayers[i])
    }
    for(var j=0lj<allBombs.length;j++) {
      drawMissle(allBombs[j]);
    }
  }
}
function drawMissle(b) {
  var targetLatLng=new google.maps.LatLng(b[0], b[1]);
  var sourceLatLng=new google.maps.LatLng(b[6], b[7]);
  var targetLocation = overlayProjection.fromLatLngToDivPixel(targetLatLng);
  var launchLocation = overlayProjection.fromLatLngToDivPixel(sourceLatLng);
  if (b[2] > 0) {
    gDrawingContext.moveTo(launchLocation.x, launchLocation.y);
    gDrawingContext.lineTo(targetLocation.x, targetLocation.y);
    var distance = haversineDistance(b[0], b[1], b[6], b[7]);
    duration=<%= clientCalcDuration %>*1000;
    dOnPath=b[2]/duration;
    var x = launchLocation.x*(dOnPath)+targetLocation.x*(1-dOnPath);
    var y = launchLocation.y*(dOnPath)+targetLocation.y*(1-dOnPath);
    var missle=new Image();
    missle.src="/images/rocket_06.png";
    missle.onload=function(){
      gDrawingContext.drawImage(missle,x-missle.width/2,y-missle.height/2);
    }
}
function drawPlayer(p) {
  var targetLocation = overlayProjection.fromLatLngToDivPixel(new google.maps.LatLng(p[0], p[1]));
  var person=new Image();
  if (allPlayers[i][4]) {
    person.src = "/images/tombstone.gif";
  }
  else {
    person.src = "http://graph.facebook.com/" + allPlayers[i][3] + "/picture";
  }
  person.onload=function(){
    gDrawingContext.drawImage(person,x-person.width/2,y-person.height/2);
  }
}
function initialize() {
  var mapOptions = {
    zoom: 14,
    mapTypeIds: [google.maps.MapTypeId.TERRAIN, "platoMap"],
    navigationControl: true,
    navigationControlOptions: { style: google.maps.NavigationControlStyle.SMALL },
    mapTypeControl: false,
    streetViewControl: false
  };
  map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
  setMapLocation();
  mapTypeExperiment();
  addOverlay();
}

function addOverlay() {
  bombPathOverlay = new BombPathOverlay(map);
}
BombPathOverlay.prototype.draw = function() {
  if (gDrawingContext)
  {
    drawGame()
  }
}


BombPathOverlay.prototype.onAdd = function() {
  // Size and position the overlay. We use a southwest and northeast
  // position of the overlay to peg it to the correct position and size.
  // We need to retrieve the projection from this overlay to do this.
  var overlayProjection = this.getProjection();

  // Retrieve the southwest and northeast coordinates of this overlay
  // in latlngs and convert them to pixels coordinates.
  // We'll use these coordinates to resize the DIV.
  var sw = overlayProjection.fromLatLngToDivPixel(map.getBounds().getSouthWest());
  var ne = overlayProjection.fromLatLngToDivPixel(map.getBounds().getNorthEast());

  // Resize the image's DIV to fit the indicated dimensions.

  // Create the DIV and set some basic attributes.
  var div = document.createElement('DIV');
  div.style.left = sw.x + 'px';
  div.style.top = ne.y + 'px';
  div.style.width = (ne.x-sw.x) + 'px';
  div.style.height = (sw.y-ne.y) + 'px';
  div.style.border = "none";
  div.style.borderWidth = "0px";
  div.style.position = "absolute";
  div.innerHTML = "<div><canvas id='gameLayer' height='" + div.style.height + "' width='" + div.style.width + "' ></canvas></div>";

  // Set the overlay's div_ property to this DIV
  this.div_ = div;

  // We add an overlay to a map via one of the map's panes.
  // We'll add this overlay to the overlayImage pane.
  var panes = this.getPanes();
  panes.overlayLayer.appendChild(div);
  gCanvasElement = document.getElementById('gameLayer');
  if (gCanvasElement != null && gCanvasElement.getContext)
  {
    gCanvasElement.width = gCanvasElement.width;
    gCanvasElement.height = gCanvasElement.height;
    gDrawingContext = gCanvasElement.getContext('2d');
  }
}

BombPathOverlay.prototype = new google.maps.OverlayView();

function BombPathOverlay(map) {

  // Now initialize all properties.
  this.img_ = null;
  this.map_ = map;
  // We define a property to hold the image's
  // div. We'll actually create this div
  // upon receipt of the add() method so we'll
  // leave it null for now.
  this.div_ = null;

  // Explicitly call setMap() on this overlay
  this.setMap(map);
}

function haversineDistance(lat1, lon1, lat2, lon2) {
  var R = 6371 * 1000; // meters;
  var dLat = (lat2-lat1) * Math.PI / 180;
  var dLon = (lon2-lon1) * Math.PI / 180;
  var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon/2) * Math.sin(dLon/2);
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  var d = R * c;
  return d;
}

function tick() {
  setTimeout("tick()", TICK_INTERVAL);
  setTimeout("window.location.reload(true)", 1500);
  drawGame();
}
window.onload = initialize;
