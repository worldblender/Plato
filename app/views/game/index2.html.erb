<% if current_user %>
<% content_for :head do %>

<style type="text/css">
  html { height: 100%; }
  body { height: 100%; margin: 0px; padding: 0px; font-family: Monospace; font-weight: bold; color: #9AFE2E; }
  #map_canvas { width:80%; height: 80%; }
.black_overlay {
	display: none;
	position: absolute;
	top: 0%;
	left: 0%;
	width: 100%;
	height: 100%;
	background-color: black;
	z-index:1001;
	-moz-opacity: 0.7;
	opacity: 0.7;
	filter: alpha(opacity=70);
}

.white_content {
	display: none;
	position: absolute;
	top: 7%;
	left: 7%;
	width: 80%;
	height: 80%;
	padding: 6px;
	border: 6px solid orange;
	background-color: black;
	z-index: 1000002;
	overflow: auto;
}
</style>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
<script type="text/javascript" src="/javascripts/markerWithLabel.js"></script>
<script type="text/javascript" src="/javascripts/infobox.js"></script>
<script type="text/javasctipt" src="/javascripts/jquery-1.4.3.js"></script>
<script type="text/javascript">
  var usr_lat = 0;
  var usr_lng = 1;
  var usr_name = 2;
  var usr_fbid = 3;
  var usr_deadtime = 4;
  var usr_obj = 5;
  var usr_hp = 6;
  var usr_score = 7;

  var msl_lat = 0;
  var msl_lng = 1;
  var msl_timeleft = 2;
  var msl_obj = 3;
  var msl_blastObj = 4;
  var msl_ownername = 5;
  var msl_srclat = 6;
  var msl_srclng = 7;
  var msl_id = 8;
var MAX_BOMB_TIME = 60*10*1000; // in milliseconds
var TICK_INTERVAL = 1000; // in milliseconds
var BOMB_RADIUS = <%= BOMB_RADIUS * 1000 %>; // in meters
var img = new Image();
img.src = '/images/login.png';
var angle = Math.PI/2;
var map;
var myLocation;
var playerIndex = -1;
var zIndexTop = 0;
var allPlayers = [<%- @players.each do |user| -%>
  [<%= user.latitude %>, <%= user.longitude %>, "<%= user.name %>", <%= user.facebook_id %>, "<%= user.deadtime %>", null, <%= user.hp %>, <%= user.curScore.round %>],
<%- end -%>];
var allBombs = [<%- @bombs.each do |bomb| -%>
  <% if !bomb.isExploded? %>[<%= bomb.latitude %>, <%= bomb.longitude %>, <%= bomb.timeLeft * 1000 %>, null, null, "<%= User.find(bomb.owner_id).name %>",<%= bomb.srcLat %>, <%=  bomb.srcLng %>, <%= bomb.id %>],<% end %>
<%- end -%>];
var gameOverlay;
var gameOverlayProjection;

function haversineDistance(lat1, lon1, lat2, lon2) {
  var R = 6371 * 1000; // meters;
  var dLat = (lat2-lat1) * Math.PI / 180;
  var dLon = (lon2-lon1) * Math.PI / 180;
  var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon/2) * Math.sin(dLon/2);
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  var d = R * c;
  return d;
}

function createButton(html) {
  var b = document.createElement('DIV');
  b.style.padding = '5px';
  b.innerHTML = html;
  b.style.display = "none";
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(b);
  return b;
}

GameOverlay.prototype = new google.maps.OverlayView();

function GameOverlay(map) {
  this.map_ = map;
  this.setMap(map);
}

function getBearing(source,target)
{
  var y = Math.sin(target.lng()-source.lng()) * Math.cos(target.lat());
  var x = Math.cos(source.lat())*Math.sin(target.lat()) - Math.sin(source.lat())*Math.cos(target.lat())*Math.cos(target.lng()-source.lng());
  var brng = Math.atan2(y, x);
  return brng;
}

GameOverlay.prototype.draw = function() {
  this.drawMissles();
}

GameOverlay.prototype.drawMissles = function() {
  for (i = 0; i < allBombs.length; ++i) {
    if(gameOverlayProjection != null)
    {
      var targetLatLng=new google.maps.LatLng(allBombs[i][msl_lat], allBombs[i][msl_lng]);
      var sourceLatLng=new google.maps.LatLng(allBombs[i][msl_srclat], allBombs[i][msl_srclng]);
      var targetLocation = gameOverlayProjection.fromLatLngToDivPixel(targetLatLng);
      var launchLocation = gameOverlayProjection.fromLatLngToDivPixel(sourceLatLng);
      var w = targetLocation.x-launchLocation.x;
      var h = targetLocation.y-launchLocation.y;
      if (allBombs[i][msl_timeleft] > 0) {
        // draw the missle a distance along the path according to how close it is
        var distance = haversineDistance(allBombs[i][msl_lat], allBombs[i][msl_lng], allBombs[i][msl_srclat], allBombs[i][msl_srclng]);
        duration=<%= clientCalcDuration %>*1000;
        dOnPath=allBombs[i][2]/duration;
        var x = launchLocation.x*(dOnPath)+targetLocation.x*(1-dOnPath);
        var y = launchLocation.y*(dOnPath)+targetLocation.y*(1-dOnPath);
        var angleDeg=getBearing(targetLatLng,sourceLatLng)*180/(Math.PI);;
        var oldBomb=document.getElementById('msl_'+allBombs[msl_id]);
        if(oldBomb == null)
        {
          var missle=new Image();
          missle.src="/images/rocket_06.png";
          missle.id="msl_" + allBombs[msl_id];
          missle.onload=function(){
            missle.style.cssText="position:absolute; -webkit-transform: rotate("+ angleDeg + "deg); -moz-transform: rotate(" + angleDeg+ "deg);";
            missle.style.pixelLeft=x;
            missle.style.pixelTop=y;
            try{
              document.getElementById('imageLayer').appendChild(this);
              //$(this).animate({pixelLeft: targetLocation.x,pixelTop: targetLocation.y},5000, function () {
                  // animation complete remove rocket or do the explotion animation or something
                  // remove bomb from dataset
              //});
            } catch(e) {
              console.log(e.message);
            }
          }
        } else {
          oldBomb.style.pixelLeft=x-oldBomb.width/2;
          oldBomb.style.pixelTop=y-oldBomb.height/2;
        }
      }
    }
  }
}

GameOverlay.prototype.onAdd = function() {
  gameOverlayProjection = this.getProjection();
  var sw = gameOverlayProjection.fromLatLngToDivPixel(map.getBounds().getSouthWest());
  var ne = gameOverlayProjection.fromLatLngToDivPixel(map.getBounds().getNorthEast());
  var div = document.createElement('div');
  div.style.left = sw.x + 'px';
  div.style.top = ne.y + 'px';
  div.style.width = (ne.x-sw.x) + 'px';
  div.style.height = (sw.y-ne.y) + 'px';
  div.style.border = "none";
  div.style.borderWidth = "0px";
  div.style.position = "absolute";
  div.innerHTML = "<div id='imageLayer'></div>";
  var panes = this.getPanes();
  panes.overlayLayer.appendChild(div);
}

function initialize() {
  var mapOptions = {
    zoom: 14,
    mapTypeIds: [google.maps.MapTypeId.TERRAIN, "platoMap"],
    navigationControl: true,
    navigationControlOptions: { style: google.maps.NavigationControlStyle.SMALL },
    mapTypeControl: false,
    streetViewControl: false
  };
  map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
  createAllPlayers();
  createAllBombs();
  setMapLocation();
  gameOverlay = new GameOverlay(map);
  var leaderboardButton = createButton("<a href='http://apps.facebook.com/worldblender_plato/' title='Top Scores'><img src='/images/leaderboard.gif'></a>");
  leaderboardButton.style.display = "block";
  var rulesButton = createButton("<a href='#' title='Show Rules' onclick='showRules(); return false'><img src='/images/rules.png'></a>");
  rulesButton.style.display = "block";
  var restartButton = createButton("<a href='/game/restart' title='Restart Game'><img src='/images/restart.png'></a>");
  <%- if current_user.deadtime -%>
    restartButton.style.display = "block";
  <%- end -%>
  <%- if current_user.curScore and (current_user.top_score == nil or current_user.top_score < 10) and current_user.curScore < 10 -%>
    showRules();
  <%- end -%>
  mapTypeExperiment();
}

function mapTypeExperiment() {
  var platoMapStyles = [
  {
    featureType: "road.arterial",
    elementType: "geometry",
    stylers: [
      { visibility: "simplified" },
      { hue: "#f6ff00" },
      { gamma: 0.38 }
    ]
  },{
    featureType: "water",
    elementType: "all",
    stylers: [
      { lightness: 36 }
    ]
  },{
    featureType: "road.highway",
    elementType: "all",
    stylers: [
      { visibility: "simplified" },
      { gamma: 0.76 }
    ]
  },{
    featureType: "all",
    elementType: "labels",
    stylers: [
      { visibility: "off" }
    ]
  },{
    featureType: "road.local",
    elementType: "all",
    stylers: [
      { visibility: "off" }
    ]
  },{
    featureType: "transit",
    elementType: "all",
    stylers: [
      { visibility: "off" }
    ]
  },{
    featureType: "administrative",
    elementType: "labels",
    stylers: [
      { visibility: "on" },
      { gamma: 0.39 },
      { lightness: -4 },
      { saturation: 100 }
    ]
  },{
    featureType: "landscape.man_made",
    elementType: "all",
    stylers: [
      { visibility: "off" }
    ]
  },{
    featureType: "all",
    elementType: "all",
    stylers: [
      { invert_lightness: true }
    ]
  },{
    featureType: "poi",
    elementType: "all",
    stylers: [
      { visibility: "off" }
    ]
  }];
  var platoMap = new google.maps.StyledMapType(platoMapStyles, {name: "Plato Style" });
  map.mapTypes.set('platoMap', platoMap);
  map.setMapTypeId('platoMap');
}

function showRules() {
  document.getElementById('rules').style.display = 'block';
  document.getElementById('fade').style.display = 'block';
}

function zOrderRotator() {
  zIndexTop++;
  for (i = 0; i < allPlayers.length; ++i) {
    var zIndex = (i + zIndexTop) % allPlayers.length + 1;
    if (allPlayers[i][usr_deadtime] != "")
      continue;
    allPlayers[i][usr_obj].setZIndex(zIndex);
  }
  setTimeout("zOrderRotator();", 2000);
}

function tick() {
  for(var i = 0; i<allBombs.length;i++)
  {
    if (allBombs[i][msl_timeleft] > 0) {
      // allBombs[i][msl_obj].setVisible(!allBombs[i][msl_obj].getVisible());
      allBombs[i][msl_obj].setOptions({labelContent: Math.round(allBombs[i][msl_timeleft] / 1000)});
      var tmpTime = allBombs[i][msl_timeleft];
      if (tmpTime > MAX_BOMB_TIME) {
        tmpTime = MAX_BOMB_TIME;
        allBombs[i][msl_blastObj].setOptions({
          fillOpacity: (1 - tmpTime / MAX_BOMB_TIME) * 0.2,
          strokeOpacity: (1 - tmpTime / MAX_BOMB_TIME) * 0.8
        });
      }
    } else {
      allBombs[i][msl_blastObj].setMap(null);
      allBombs[i][msl_obj].setIcon("/images/explosion.gif");
      allBombs[i][msl_obj].setVisible(true);
      // setTimeout("destroyBomb(i);",1500);
      setTimeout("window.location.reload(true);", 1500);
    }
    allBombs[i][msl_timeleft] -= TICK_INTERVAL;
  }
  setTimeout("tick();", TICK_INTERVAL);

  if(gameOverlay != null) {
    gameOverlay.draw();
  }
}

function createBomb(location, i) {
  if(allBombs[i][msl_obj] == null)
  {
    var bomb = new MarkerWithLabel({
      position: location,
      map: map,
      title: "Bomb",
      icon: "/images/target_07.png",
      zIndex: 50000,
      labelAnchor: myLocation
      });
    bomb.owner = allBombs[i][msl_ownername];
    google.maps.event.addListener(bomb, 'click', function() {
      var bombInfoWindow = new google.maps.InfoWindow({
        content: this.owner + "'s bomb"
      });
      bombInfoWindow.open(map, this);
    });
    allBombs[i][msl_obj] = bomb;
  }
  // TODO(Jeff): optimization: if bomb will not explode within MAX_BOMB_TIME, don't draw the circle yet
  if(allBombs[i][msl_blastObj] == null)
  {
    var bombFallout = new google.maps.Circle({
      map: map,
      center: bomb.getPosition(),
      fillColor: "#FF0000",
      fillOpacity: 0.2,
      strokeColor: "#FF0000",
      strokeOpacity: 0.8,
      strokeWeight: 2,
      radius: BOMB_RADIUS
      });
    allBombs[i][msl_blastObj] = bombFallout;
  }
}

function createAllBombs() {
  for (i = 0; i < allBombs.length; i++) {
    var location = new google.maps.LatLng(allBombs[i][0], allBombs[i][1]);
    if (allBombs[i][2] > 0) {
      createBomb(location, i);
    }
  }
}

function createPlayer(i) {
  if (allPlayers[i][usr_deadtime])
    icon = "/images/tombstone.gif";
  else
    icon = "http://graph.facebook.com/" + allPlayers[i][usr_fbid] + "/picture";
  var location = new google.maps.LatLng(allPlayers[i][usr_lat], allPlayers[i][usr_lng]);
  var marker = new google.maps.Marker({
    position: location,
    map: map,
    title: allPlayers[i][usr_name],
    icon: icon,
    zIndex: 0
  });

  allPlayers[i][usr_obj] = marker;

  marker.info = allPlayers[i];
  google.maps.event.addListener(marker, 'click', function() {
    var playerInfobox = new InfoBox({
      content: "<b>" + this.getTitle() + "</b><br>" + this.info[6] + "hp<br>" + this.info[7] + "points",
      boxStyle: { width: "200px" },
      closeBoxURL: ""
    });
    playerInfobox.open(map, this);
    setTimeout(function(){playerInfobox.close()}, 4000);
  });
}

function updatePlayer(i, position) {
  allPlayers[i][usr_obj].setPosition(myLocation);
}

function createAllPlayers() {
  for (var i = 0; i < allPlayers.length; ++i) {
    if (allPlayers[i][usr_fbid] == <%= current_user.facebook_id %>) {
      playerIndex = i;
      continue;
    }
    createPlayer(i);
  }
}

function createBombButton() {
  var marker = new MarkerWithLabel({
    position: myLocation,
    map: map,
    title: "You bomb",
    icon: "/images/dragBomb.png",
    draggable: true,
    zIndex: 100000,
    labelContent: "",
    labelAnchor: myLocation
  });

  <%- if current_user.curScore and current_user.curScore < 100 -%>
    var helpInfobox = new InfoBox({
      content: "Drag your bomb to where you want to drop it, and then double-click to light the fuse!",
      boxStyle: { width: "250px" },
      closeBoxURL: ""
    });
    setTimeout(function(){helpInfobox.close()}, 8000);
    helpInfobox.open(map, marker);
  <%- end -%>
  google.maps.event.addListener(marker, "dragend", function() {
    var distance = haversineDistance(myLocation.lat(), myLocation.lng(), this.getPosition().lat(), this.getPosition().lng());
    var displayedBombTime = Math.round(<%= clientCalcDuration %>);
    this.setOptions({labelContent: displayedBombTime});
  });
  google.maps.event.addListener(marker, "dblclick", function() {
    this.setMap(null);
    var bombLat1 = this.getPosition().lat();
    var bombLng1 = this.getPosition().lng();
    var distance = haversineDistance(myLocation.lat(), myLocation.lng(), bombLat1, bombLng1);
    var bombTime = 1000 * <%= clientCalcDuration %>;
    allBombs.push([bombLat1, bombLng1, bombTime, null, null, "<%= current_user.name %>",myLocation.lat(),myLocation.lng()]);
    createBomb(this.getPosition(), allBombs.length-1);
    var targetUrl = "/game/dropBomb?lat=" + this.getPosition().lat() + "&lng=" + this.getPosition().lng();
    pushData = new Image();
    pushData.src = targetUrl;
  });
}

function gotPositionCallback(position) {
  myLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
  pushData = new Image();
  pushData.src = "/game/playerMoved?lat=" + position.coords.latitude + "&lng=" + position.coords.longitude;
  map.setCenter(myLocation);
  <%- if !current_user.deadtime and !current_user.bomb_id -%>
    createBombButton();
  <%- end -%>

  allPlayers[playerIndex][usr_lat] = position.coords.latitude;
  allPlayers[playerIndex][usr_lng] = position.coords.longitude;
  createPlayer(playerIndex);

  navigator.geolocation.watchPosition(function(position) {
    //console.log("position: " + position.coords.latitude + ',' + position.coords.longitude + '; myLocation: ' + myLocation.lat() + ', ' + myLocation.lng());
    if (myLocation.lat() == position.coords.latitude && myLocation.lng() == position.coords.longitude)
      return;
    pushData = new Image();
    pushData.src = "/game/playerMoved?lat=" + position.coords.latitude + "&lng=" + position.coords.longitude;
    myLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    allPlayers[playerIndex][usr_obj].setPosition(myLocation);
  });
  zOrderRotator();
  tick();
}

function setMapLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(gotPositionCallback); // TODO(jeff): catch on error
  } else {
    alert("Your browser does not support geolocation. Please try a different browser.");
  }
}

function savePhone(t) {
  t.disabled = true;
  pushData = new Image();
  pushData.src = '/game/savePhone?num=' + document.getElementById('phone').value;
  t.value = "Saved";
}

window.onload = initialize;
</script>
<% end %>

<div id="map_canvas"></div>
<div id="temp">
  <canvas id="tutorial" width="150" height="150">
  </canvas>
</div>
<div id="rules" class="white_content">
<%= GAME_NAME %> Instructions:<br>
1. You get one bomb at a time. Drag it to where you want.<br>
2. Double click the bomb to light it.<br>
3. The further away you drop a bomb, the longer it takes to detonate.<br>
4. Being near an exploding bomb (even your own) will hurt you.<br>
5. Move around in the (real) world to avoid bombs.<br>
<br>
Enter your phone# to receive SMS instead of email notifications: <input id="phone" type="text" name="phone" size="10"><input type="button" value="Save" onClick="savePhone(this)">
<br><br>
<center><input type="button" value="Continue" onClick="document.getElementById('rules').style.display = 'none'; document.getElementById('fade').style.display = 'none';"></center>
</div>
<div id="fade" class="black_overlay"></div>
<%- end -%>

