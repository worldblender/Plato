<% if current_user %>
<% content_for :head do %>

<style type="text/css">
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px; font-family: Verdana; font-size: 0.7em }
  #map_canvas { width:100%; height: 100% }
  #lb { font: bold 0.6em Verdana; text-decoration: none; color: #444; }
.black_overlay {
	display: none;
	position: absolute;
	top: 0%;
	left: 0%;
	width: 100%;
	height: 100%;
	background-color: black;
	z-index:1001;
	-moz-opacity: 0.8;
	opacity: 0.8;
	filter: alpha(opacity=80);
}

.white_content {
	display: none;
	position: absolute;
	top: 7%;
	left: 7%;
	width: 80%;
	height: 80%;
	padding: 6px;
	border: 6px solid orange;
	background-color: white;
	z-index: 1000002;
	overflow: auto;
}
</style>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
<script type="text/javascript" src="/javascripts/markerWithLabel.js"></script>
<script type="text/javascript">
var MAX_BOMB_TIME = 60*10*1000; // in milliseconds
var TICK_INTERVAL = 1000; // in milliseconds
var BOMB_RADIUS = <%= BOMB_RADIUS * 1000 %>; // in meters
var img = new Image();
img.src = '/images/login.png';
var angle = Math.PI/2;
var map;
var myLocation;
var playerIndex = -1;
var zIndexTop = 0;
var allPlayers = [<%- @players.each do |user| -%>
  [<%= user.latitude %>, <%= user.longitude %>, "<%= user.name %>", <%= user.facebook_id %>, "<%= user.deadtime %>", null, <%= user.hp %>, <%= user.curScore.round %>],
<%- end -%>];
var allBombs = [<%- @bombs.each do |bomb| -%>
  <%- if !bomb.isExploded? -%>[<%= bomb.latitude %>, <%= bomb.longitude %>, <%= bomb.timeLeft * 1000 %>, null, null, "<%= User.find(bomb.owner_id).name %>",<%= bomb.srcLat %>, <%=  bomb.srcLng %>],<%- end -%>
<%- end -%>];

function rotBomb{
  var cosa = Math.cos(angle);
  var sina = Math.sin(angle);
  canvas.clearRect(0,0,100,100);
  canvas.save();
  canvas.rotate(angle);
  canvas.translate(50*sina+50*cosa, 50*cosa-50*sina);
  canvas.drawImage(img,-50,-50);
  canvas.restore();
  angle+=.1
}

function haversineDistance(lat1, lon1, lat2, lon2) {
  var R = 6371 * 1000; // meters;
  var dLat = (lat2-lat1) * Math.PI / 180;
  var dLon = (lon2-lon1) * Math.PI / 180;
  var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon/2) * Math.sin(dLon/2);
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  var d = R * c;
  return d;
}

function createButton(html) {
  var b = document.createElement('DIV');
  b.style.padding = '5px';
  b.innerHTML = html;
  b.style.display = "none";
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(b);
  return b;
}

function initialize() {
  var mapOptions = {
    zoom: 16,
    mapTypeId: google.maps.MapTypeId.SATELLITE,
    navigationControl: true,
    navigationControlOptions: { style: google.maps.NavigationControlStyle.SMALL },
    mapTypeControl: false,
    streetViewControl: false
  };
  map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
  drawAllPlayers();
  drawAllBombs();
  setMapLocation();
  var leaderboardButton = createButton("<a href='http://apps.facebook.com/worldblender_plato/' title='Top Scores' id='lb'><img src='/images/leaderboard.gif'></a>");
  leaderboardButton.style.display = "block";
  var rulesButton = createButton("<a href='#' title='Show Rules' onclick='showRules(); return false'><img src='/images/rules.png'></a>");
  rulesButton.style.display = "block";
  var restartButton = createButton("<a href='/game/restart' title='Restart Game'><img src='/images/restart.png'></a>");
  <%- if current_user.deadtime -%>
    restartButton.style.display = "block";
  <%- end -%>
  <%- if current_user.curScore and (current_user.top_score == nil or current_user.top_score < 10) and current_user.curScore < 10 -%>
    showRules();
  <%- end -%>
}

function showRules() {
  document.getElementById('rules').style.display = 'block';
  document.getElementById('fade').style.display = 'block';
}

function zOrderRotator() {
  zIndexTop++;
  for (i = 0; i < allPlayers.length; ++i) {
    var zIndex = (i + zIndexTop) % allPlayers.length + 1;
    if (allPlayers[i][4] != "")
      continue;
    allPlayers[i][5].setZIndex(zIndex);
  }
  setTimeout("zOrderRotator()", 2000);
}

function tick(i) {
  if (allBombs[i][2] > 0) {
    allBombs[i][3].setVisible(!allBombs[i][3].getVisible());
    allBombs[i][3].setOptions({labelContent: Math.round(allBombs[i][2] / 1000) + "s"});
    var tmpTime = allBombs[i][2];
    if (tmpTime > MAX_BOMB_TIME) {
      tmpTime = MAX_BOMB_TIME;
      allBombs[i][4].setOptions({
        fillOpacity: (1 - tmpTime / MAX_BOMB_TIME) * 0.2,
        strokeOpacity: (1 - tmpTime / MAX_BOMB_TIME) * 0.8
      });
    }
    var timeoutStatement = "tick(" + i + ")";
    setTimeout(timeoutStatement, TICK_INTERVAL);
  } else {
    allBombs[i][4].setMap(null);
    allBombs[i][3].setIcon("/images/explosion.gif");
    allBombs[i][3].setVisible(true);
    window.location.reload(true);
  }
  allBombs[i][2] -= TICK_INTERVAL;
}

function placeBomb(location, i) {
  var bomb = new MarkerWithLabel({
    position: location,
    map: map,
    title: "Bomb",
    icon: "/images/litBomb.gif",
    zIndex: 50000,
    labelAnchor: myLocation
  });
  bomb.owner = allBombs[i][5];
  // TODO(Jeff): optimization: if bomb will not explode within MAX_BOMB_TIME, don't draw the circle yet
  var bombFallout = new google.maps.Circle({
    map: map,
    center: bomb.getPosition(),
    fillColor: "#FF0000",
    fillOpacity: 0.2,
    strokeColor: "#FF0000",
    strokeOpacity: 0.8,
    strokeWeight: 2,
    radius: BOMB_RADIUS
    });
  var bombPath = new ELabel(map.getCenter(),'<canvas id="bombpathcanvas" width="100" height="100"><\/canvas>,null,new GSize(-50,50));
  map.addOverlay(bombPath);
  canvas=document.getElemtnById("bombpathcanvas").getContext('2d');
  setInterval("rotBomb",100);
  allBombs[i][3] = bomb;
  allBombs[i][4] = bombFallout;

  google.maps.event.addListener(bomb, 'click', function() {
    var bombInfoWindow = new google.maps.InfoWindow({
      content: this.owner + "'s bomb"
    });
    bombInfoWindow.open(map, this);
  });

  tick(i);
}

function drawAllBombs() {
  for (i = 0; i < allBombs.length; ++i) {
    var location = new google.maps.LatLng(allBombs[i][0], allBombs[i][1]);
    if (allBombs[i][2] > 0) {
      placeBomb(location, i);
    }
  }
}

function drawPlayer(i) {
  if (allPlayers[i][4])
    icon = "/images/tombstone.gif";
  else
    icon = "http://graph.facebook.com/" + allPlayers[i][3] + "/picture";
  var location = new google.maps.LatLng(allPlayers[i][0], allPlayers[i][1]);
  var marker = new google.maps.Marker({
    position: location,
    map: map,
    title: allPlayers[i][2],
    icon: icon,
    zIndex: 0
  });

  allPlayers[i][5] = marker;

  marker.info = allPlayers[i];
  google.maps.event.addListener(marker, 'click', function() {
    var playerInfoWindow = new google.maps.InfoWindow({
      content: "<b>" + this.getTitle() + "</b><br>" + this.info[6] + "hp<br>" + this.info[7] + "points"
    });
    playerInfoWindow.open(map, this);
  });
}

function drawAllPlayers() {
  for (var i = 0; i < allPlayers.length; ++i) {
    if (allPlayers[i][3] == <%= current_user.facebook_id %>) {
      playerIndex = i;
      continue;
    }

    drawPlayer(i);
  }
}

function createBomb() {
  var marker = new MarkerWithLabel({
    position: myLocation,
    map: map,
    title: "Drop this bomb anywhere!",
    icon: "/images/dragBomb.png",
    draggable: true,
    zIndex: 100000,
    labelContent: "",
    labelAnchor: myLocation
  });

  <%- if current_user.curScore < 100 -%>
    var infoWindow = new google.maps.InfoWindow({
      content: "Drag your bomb to where you want to drop it, and then double-click to light the fuse!",
      maxWidth: 250
    });
    infoWindow.open(map, marker);
  <%- end -%>
  google.maps.event.addListener(marker, "dragend", function() {
    var distance = haversineDistance(myLocation.lat(), myLocation.lng(), this.getPosition().lat(), this.getPosition().lng());
    var displayedBombTime = Math.round(<%= clientCalcDuration %>);
    this.setOptions({labelContent: displayedBombTime + "s"});
  });
  google.maps.event.addListener(marker, "dblclick", function() {
    this.setMap(null);
    var bombLat1 = this.getPosition().lat();
    var bombLng1 = this.getPosition().lng();
    var distance = haversineDistance(myLocation.lat(), myLocation.lng(), bombLat1, bombLng1);
    var bombTime = 1000 * <%= clientCalcDuration %>;
    allBombs.push([bombLat1, bombLng1, bombTime, null, null, "<%= current_user.name %>"]);
    placeBomb(this.getPosition(), allBombs.length-1);
    var targetUrl = "/game/dropBomb?lat=" + this.getPosition().lat() + "&lng=" + this.getPosition().lng();
    pushData = new Image();
    pushData.src = targetUrl;
  });
}

function gotPositionCallback(position) {
  myLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
  pushData = new Image();
  pushData.src = "/game/playerMoved?lat=" + position.coords.latitude + "&lng=" + position.coords.longitude;
  map.setCenter(myLocation);
  <%- if !current_user.deadtime and !current_user.bomb_id -%>
    createBomb();
  <%- end -%>

  allPlayers[playerIndex][0] = position.coords.latitude;
  allPlayers[playerIndex][1] = position.coords.longitude;
  drawPlayer(playerIndex);

  navigator.geolocation.watchPosition(function(position) {
    //console.log("position: " + position.coords.latitude + ',' + position.coords.longitude + '; myLocation: ' + myLocation.lat() + ', ' + myLocation.lng());
    if (myLocation.lat() == position.coords.latitude && myLocation.lng() == position.coords.longitude)
      return;
    pushData = new Image();
    pushData.src = "/game/playerMoved?lat=" + position.coords.latitude + "&lng=" + position.coords.longitude;
    myLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    allPlayers[playerIndex][5].setPosition(myLocation);
    // map.setCenter(myLocation); // maybe?
  });

  zOrderRotator();
}

function setMapLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(gotPositionCallback); // TODO(jeff): catch on error
  } else {
    alert("Your browser does not support geolocation. Please try a different browser.");
  }
}

function savePhone(t) {
  t.disabled = true;
  pushData = new Image();
  pushData.src = '/game/savePhone?num=' + document.getElementById('phone').value;
  t.value = "Saved";
}

window.onload = initialize;
</script>
<% end %>

<div id="map_canvas"></div>
<div id="rules" class="white_content">
Welcome to <%= GAME_NAME %>!<br><br>
Instructions:<br>
1. You get one bomb at a time. Drag it to where you want.<br>
2. Double click the bomb to light it.<br>
3. The further away you drop a bomb, the longer it takes to detonate.<br>
4. Being near an exploding bomb (even your own) will hurt you.<br>
5. Move around in the (real) world to avoid bombs.<br>
6. Scores points by staying alive.<br>
<br>
Enter your phone# to receive SMS instead of email notifications: <input id="phone" type="text" name="phone" size="10"><input type="button" value="Save" onClick="savePhone(this)">
<br><br>
<center><input type="button" value="Continue" onClick="document.getElementById('rules').style.display = 'none'; document.getElementById('fade').style.display = 'none';"></center>
</div>
<div id="fade" class="black_overlay"></div>
<%- end -%>
