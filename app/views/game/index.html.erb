<%if current_user %>

<% content_for :head do %>

<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
<style type="text/css">
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map_canvas { width:100%; height: 100% }
</style>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
<script type="text/javascript">

var BOMB_TIME = <%= BOMB_TIME * 1000 %>; // in milliseconds
var TICK_INTERVAL = 1000; // in milliseconds
var BOMB_RADIUS = <%= BOMB_RADIUS * 1000 %>; // in meters - we should move this to the constant
var map;
var allPlayers = [<%- @players.each do |user| %>
  <%- if @players.first != user %>,<%- end %>
  [<%= user.latitude %>, <%= user.longitude %>, "<%= user.name %>", <%= user.facebook_id %>, "<%= user.deadtime %>"]
<%- end %>];
var allBombs = [<%- @bombs.each do |bomb| %>
  <%- if !bomb.detonatetime %>
    [<%= bomb.latitude %>, <%= bomb.longitude %>, <%= bomb.timeLeft %>],
  <%- end %>
<%- end %>];

function initialize() {
  console.log("initialize called");
  var mapOptions = {
    zoom: 16,
    mapTypeId: google.maps.MapTypeId.TERRAIN,
    navigationControl: false,
    mapTypeControl: false,
    streetViewControl: false
  };
  map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
  setMapLocation();
  drawAllPlayers();
  drawAllBombs();
  setTimeout("hideCopyright()", 1000);
}

function hideCopyright() {
  // currently not used
  console.log('hideCopyright called');
  var logo = document.getElementById("map_canvas").firstChild.firstChild.nextSibling;
  if (!logo) {
    setTimeout("hideCopyright()", 1000);
    return;
  }
  logo.style.display = "none";
  logo.nextSibling.style.display = "none";
}

function tick(i) {
  console.log("tick called: " + i + " with " + allBombs[i][2] + "ms remaining.");
  allBombs[i][2] -= TICK_INTERVAL;
  if (allBombs[i][2] > 0) {
    allBombs[i][3].setVisible(!allBombs[i][3].getVisible());
    var fillO = allBombs[i][2] / BOMB_TIME * 0.2;
    var strokeO = allBombs[i][2] / BOMB_TIME * 0.8;
    allBombs[i][4].setOptions({
      fillOpacity: fillO,
      strokeOpacity: strokeO
    });
    var timeoutStatement = "tick(" + i + ")";
    setTimeout(timeoutStatement, TICK_INTERVAL);
  } else {
    allBombs[i][4].setMap(null);
    allBombs[i][3].setIcon("http://tibia.looki.de/images/magic/ultimateexplosion.gif");
    allBombs[i][3].setVisible(true);
    //window.location.reload(true);
  }
}

function placeBomb(location, i, isOwner) {
  console.log("placing bomb at: " + location);

  var bomb = new google.maps.Marker({
    position: location,
    map: map,
    title: "Bomb",
    icon: "http://www.qweas.com/icon/bomb-patrol.gif",
    zIndex: 0.5
  });
  var fillColor = strokeColor = "#FF0000";
  if (isOwner) {
    var fillColor = strokeColor = "#0000FF";
  }
  var bombFallout = new google.maps.Circle({
    map: map,
    center: bomb.getPosition(),
    fillColor: fillColor,
    fillOpacity: 0.2,
    strokeColor: strokeColor,
    strokeOpacity: 0.8,
    strokeWeight: 2,
    radius: BOMB_RADIUS
  });
  console.log("drew bomb " + i + " at (" + location.lat() + "," + location.lng() + ")");
  allBombs[i][3] = bomb;
  allBombs[i][4] = bombFallout;
  var timeoutStatement = "tick(" + i + ")";
  console.log("setting timeout with statement: " + timeoutStatement);
  setTimeout(timeoutStatement, TICK_INTERVAL);
}

function drawAllBombs() {
  console.log("drawAllBombs called");
  for (i = 0; i < allBombs.length; ++i) {
    var location = new google.maps.LatLng(allBombs[i][0], allBombs[i][1]);
    if (allBombs[i][2] > 0) {
      placeBomb(location, i, false);
    }
  }
}

function drawAllPlayers() {
  console.log("drawAllPlayers called");
  for (i = 0; i < allPlayers.length; ++i) {
    if (allPlayers[i][4])
      icon = "http://freepages.genealogy.rootsweb.ancestry.com/~larsonmorgan/gifs/tombstone.gif";
    else
      icon = "http://graph.facebook.com/" + allPlayers[i][3] + "/picture";
    var location = new google.maps.LatLng(allPlayers[i][0], allPlayers[i][1]);
    var marker = new google.maps.Marker({
      position: location,
      map: map,
      title: allPlayers[i][2],
      //icon: "http://jeffhuang.com/personIcon.png",
      icon: icon, //"http://graph.facebook.com/" + allPlayers[i][3] + "/picture",
      zIndex: 0
    });

    var infoWindow = new google.maps.InfoWindow({
      content: allPlayers[i][2]
    }); // TODO(Jeff): only Brad gets an InfoWindow. why?

    google.maps.event.addListener(marker, 'click', function() {
      infoWindow.open(map, marker);
    });

    console.log("drew player " + i + " at (" + location.lat() + "," + location.lng() + ")");
  }
}

function createBomb(location) {
  console.log("creating bomb at: " + location);

  var marker = new google.maps.Marker({
    position: location,
    map: map,
    title: "Drop this bomb anywhere!",
    icon: "http://www.tzaclan.net/forum/images/Shop/Items/icon_bomb_32.png",
    draggable: true,
    zIndex: 1
  });
  var infoWindow = new google.maps.InfoWindow({
    content: "Drag your bomb to where you want to drop it,<br> and then double-click to light the fuse!"
  });
  infoWindow.open(map, marker);
  google.maps.event.addListener(marker, "dragend", function() {
    console.log("bomb moved to " + marker.getPosition());
  });
  google.maps.event.addListener(marker, "dblclick", function() {
    marker.setMap(null);
    allBombs.push([marker.getPosition().lat(), marker.getPosition().lng(), BOMB_TIME]);
    pushData = new Image();
    pushData.src = "/game/dropBomb?lat=" + marker.getPosition().lat() + "&lng=" + marker.getPosition().lng();
    placeBomb(marker.getPosition(), allBombs.length-1, true);
  });
}

function gotPositionCallback(position) {
  console.log("gotPositionCallback called");
  var initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
  map.setCenter(initialLocation);
  <% if !current_user.deadtime and !current_user.bomb_id %>
    createBomb(initialLocation);
  <% end %>
}

function setMapLocation() {
  console.log("setMapLocation called");
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(gotPositionCallback,
      function(error) {
        alert("Geolocation failed: " + error.message);
      }, {timeout: 5000}
    );
    var watchId = navigator.geolocation.watchPosition(function(position) {
      pushData = new Image();
      pushData.src = "/game/playerMoved?lat=" + position.coords.latitude + "&lng=" + position.coords.longitude;
      // TODO(jeff): redraw player in new location
      console.log("your location has changed to (" + position.coords.latitude + "," + position.coords.longitude + ")");
    });
  } else {
    alert("No navigator.geolocation");
  }
}

window.onload = initialize;

</script>
<% end %>

<div id="map_canvas"></div>

<% end %>
