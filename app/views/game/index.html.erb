<% if current_user %>
<% content_for :head do %>

<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
<style type="text/css">
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map_canvas { width:100%; height: 100% }
</style>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
<script type="text/javascript" src="/javascripts/markerWithLabel.js"></script>
<script type="text/javascript">

var MAX_BOMB_TIME = 60*10*1000; // in milliseconds
var TICK_INTERVAL = 1000; // in milliseconds
var BOMB_RADIUS = <%= BOMB_RADIUS * 1000 %>; // in meters
var map;
var myLocation;
var playerIndex = -1;
var zIndexTop = 0;
var allPlayers = [<%- @players.each do |user| -%>
  [<%= user.latitude %>, <%= user.longitude %>, "<%= user.name %>", <%= user.facebook_id %>, "<%= user.deadtime %>", null, <%= user.hp %>, <%= user.curScore.round %>],
<%- end -%>];
var allBombs = [<%- @bombs.each do |bomb| -%>
  <%- if !bomb.isExploded? -%>[<%= bomb.latitude %>, <%= bomb.longitude %>, <%= bomb.timeLeft * 1000 %>],<%- end -%>
<%- end -%>];

function haversineDistance(lat1, lon1, lat2, lon2) {
  var R = 6371 * 1000; // meters;
  var dLat = (lat2-lat1) * Math.PI / 180;
  var dLon = (lon2-lon1) * Math.PI / 180;
  var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon/2) * Math.sin(dLon/2);
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  var d = R * c;
  return d;
}

function createButton(html) {
  var controlDiv = document.createElement('DIV');
  controlDiv.style.padding = '5px';
  controlDiv.innerHTML = html;
  controlDiv.style.display = "none";
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(controlDiv);
  return controlDiv;
}

function initialize() {
  console.log("initialize called");
  var mapOptions = {
    zoom: 16,
    mapTypeId: google.maps.MapTypeId.ROADMAP, // TERRAIN looks better but is it slower?
    navigationControl: false,
    mapTypeControl: false,
    streetViewControl: false
  };
  map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
  drawAllPlayers();
  drawAllBombs();
  setMapLocation();
  var leaderboardButton = createButton("<a href='http://apps.facebook.com/worldblender_plato/'><img src='/images/leaderboard.gif'><br>Leaderboard</a>");
  leaderboardButton.style.display = "block";
  var restartButton = createButton("<a href='/game/restart'><img src='/images/restart.png'></a>");
  <%- if current_user.deadtime -%>
    restartButton.style.display = "block";
  <%- end -%>
}

function zOrderRotator() {
  zIndexTop++;
  for (i = 0; i < allPlayers.length; ++i) {
    var zIndex = (i + zIndexTop) % allPlayers.length + 1;
    if (allPlayers[i][4] != "")
      continue;
    allPlayers[i][5].setZIndex(zIndex);
  }
  setTimeout("zOrderRotator()", 2000);
}

function tick(i) { // TODO(Jeff): optimization: if bomb will not explode within MAX_BOMB_TIME, don't draw the circle yet
  //console.log("tick called: " + i + " with " + allBombs[i][2] + "ms remaining.");
  if (allBombs[i][2] > 0) {
    allBombs[i][3].setVisible(!allBombs[i][3].getVisible());
    allBombs[i][3].setOptions({labelContent: Math.round(allBombs[i][2] / 1000) + "s"});
    var tmpTime = allBombs[i][2];
    if (tmpTime > MAX_BOMB_TIME)
      tmpTime = MAX_BOMB_TIME;
    allBombs[i][4].setOptions({
      fillOpacity: (1 - tmpTime / MAX_BOMB_TIME) * 0.2,
      strokeOpacity: (1 - tmpTime / MAX_BOMB_TIME) * 0.8
    });
    var timeoutStatement = "tick(" + i + ")";
    setTimeout(timeoutStatement, TICK_INTERVAL);
  } else {
    allBombs[i][4].setMap(null);
    allBombs[i][3].setIcon("/images/explosion.gif");
    allBombs[i][3].setVisible(true);
    window.location.reload(true);
  }
  allBombs[i][2] -= TICK_INTERVAL;
}

function placeBomb(location, i) {
  console.log("placing bomb at: " + location);

  var bomb = new MarkerWithLabel({
    position: location,
    map: map,
    title: "Bomb",
    icon: "/images/litBomb.gif",
    zIndex: 50000,
    labelAnchor: myLocation,
    labelStyle: {opacity: 0.7}
  });
  var bombFallout = new google.maps.Circle({
    map: map,
    center: bomb.getPosition(),
    fillColor: "#FF0000",
    fillOpacity: 0.2,
    strokeColor: "#FF0000",
    strokeOpacity: 0.8,
    strokeWeight: 2,
    radius: BOMB_RADIUS
  });
  console.log("drew bomb " + i + " at (" + location.lat() + "," + location.lng() + ")");
  allBombs[i][3] = bomb;
  allBombs[i][4] = bombFallout;
  console.log("setting timeout with statement: tick(" + i + ")");
  tick(i);
}

function drawAllBombs() {
  console.log("drawAllBombs called");
  for (i = 0; i < allBombs.length; ++i) {
    var location = new google.maps.LatLng(allBombs[i][0], allBombs[i][1]);
    if (allBombs[i][2] > 0) {
      placeBomb(location, i);
    }
  }
}

function drawPlayer(i) {
  if (allPlayers[i][4])
    icon = "/images/tombstone.gif";
  else
    icon = "http://graph.facebook.com/" + allPlayers[i][3] + "/picture";
  var location = new google.maps.LatLng(allPlayers[i][0], allPlayers[i][1]);
  var marker = new google.maps.Marker({
    position: location,
    map: map,
    title: allPlayers[i][2],
    icon: icon, //"http://jeffhuang.com/personIcon.png",
    zIndex: 0
  });

  //console.log("user " + i + " has been alive <%= Time.now - current_user.createtime %>");

  allPlayers[i][5] = marker;

  marker.info = allPlayers[i];
  google.maps.event.addListener(marker, 'click', function() {
    var playerInfoWindow = new google.maps.InfoWindow({
      content: "<b>" + this.getTitle() + "</b><br>" + this.info[6] + "hp<br>" + this.info[7] + "points"
    });
    playerInfoWindow.open(map, this);
  });

  console.log("drew player " + i + " at (" + location.lat() + "," + location.lng() + ")");
}

function drawAllPlayers() {
  console.log("drawAllPlayers called");
  for (var i = 0; i < allPlayers.length; ++i) {
    if (allPlayers[i][3] == <%= current_user.facebook_id %>) {
      playerIndex = i;
      continue;
    }

    drawPlayer(i);
  }
}

function createBomb() {
  console.log("creating bomb at: " + myLocation);

  var marker = new MarkerWithLabel({
    position: myLocation,
    map: map,
    title: "Drop this bomb anywhere!",
    icon: "/images/dragBomb.png",
    draggable: true,
    zIndex: 100000,
    labelContent: "",
    labelAnchor: myLocation,
    labelStyle: {opacity: 0.7}
  });

  <%- if current_user.curScore < 100 -%>
    var infoWindow = new google.maps.InfoWindow({
      content: "Drag your bomb to where you want to drop it, and then double-click to light the fuse!"
    });
    infoWindow.open(map, marker);
  <%- end -%>
  google.maps.event.addListener(marker, "dragend", function() {
    var distance = haversineDistance(myLocation.lat(), myLocation.lng(), this.getPosition().lat(), this.getPosition().lng());
    var displayedBombTime = Math.round(<%= clientCalcDuration %>);
    this.setOptions({labelContent: displayedBombTime + "s"});
  });
  google.maps.event.addListener(marker, "dblclick", function() {
    this.setMap(null);
    var bombLat1 = this.getPosition().lat();
    var bombLng1 = this.getPosition().lng();
    var distance = haversineDistance(myLocation.lat(), myLocation.lng(), bombLat1, bombLng1);
    var bombTime = 1000 * <%= clientCalcDuration %>;
    allBombs.push([bombLat1, bombLng1, bombTime]);
    placeBomb(this.getPosition(), allBombs.length-1);
    var targetUrl = "/game/dropBomb?lat=" + this.getPosition().lat() + "&lng=" + this.getPosition().lng();
    pushData = new Image();
    pushData.src = targetUrl;
  });
}

function gotPositionCallback(position) {
  console.log("gotPositionCallback called");
  myLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
  map.setCenter(myLocation);
  <%- if !current_user.deadtime and !current_user.bomb_id -%>
    createBomb();
  <%- end -%>

  allPlayers[playerIndex][0] = position.coords.latitude;
  allPlayers[playerIndex][1] = position.coords.longitude;
  drawPlayer(playerIndex);

  var watchId = navigator.geolocation.watchPosition(function(position) {
    pushData = new Image();
    pushData.src = "/game/playerMoved?lat=" + position.coords.latitude + "&lng=" + position.coords.longitude;
    console.log("your location has changed to (" + position.coords.latitude + "," + position.coords.longitude + ")");
    myLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    allPlayers[playerIndex][5].setPosition(myLocation);
    // map.setCenter(myLocation); // maybe?
  });

  zOrderRotator();
}

function setMapLocation() {
  console.log("setMapLocation called");
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(gotPositionCallback,
      function(error) {
        alert("Geolocation failed: " + error.message);
      }, {timeout: 8000}
    );
  } else {
    alert("No navigator.geolocation");
  }
}

window.onload = initialize;
</script>
<% end %>

<div id="map_canvas"></div>
<% end %>
